#@ load("@ytt:data", "data")

#@ if hasattr(data.values.ceph_csi_rbd, "storage_classes"):
#@ for sc in data.values.ceph_csi_rbd.storage_classes:
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
   name: #@ sc.name
   annotations: 
     #@ if/end hasattr(sc, "default"):
     storageclass.kubernetes.io/is-default-class: "true"
provisioner: rbd.csi.ceph.com
parameters:
   clusterID: #@ data.values.ceph_csi_rbd.cluster_id
   # You need to specify the replicated pool here in the `pool` parameter, it is
   # used for the metadata of the images.
   #@ if hasattr(sc, "data_pool"):
   # The erasure coded pool must be set as the `dataPool` parameter below.
   dataPool: ec-data-pool
   #@ end
   pool: xfs-pool
   imageFeatures: layering
   csi.storage.k8s.io/provisioner-secret-name: csi-rbd-secret
   csi.storage.k8s.io/provisioner-secret-namespace: #@ data.values.ceph_csi_rbd.namespace
   csi.storage.k8s.io/controller-expand-secret-name: csi-rbd-secret
   csi.storage.k8s.io/controller-expand-secret-namespace: #@ data.values.ceph_csi_rbd.namespace
   csi.storage.k8s.io/node-stage-secret-name: csi-rbd-secret
   csi.storage.k8s.io/node-stage-secret-namespace: #@ data.values.ceph_csi_rbd.namespace
   csi.storage.k8s.io/fstype: #@ sc.fstype

   # Instruct the plugin it has to encrypt the volume
   # By default it is disabled. Valid values are "true" or "false".
   # A string is expected here, i.e. "true", not true.
   # encrypted: "true"

   # Use external key management system for encryption passphrases by specifying
   # a unique ID matching KMS ConfigMap. The ID is only used for correlation to
   # config map entry.
   # encryptionKMSID: <kms-config-id>

reclaimPolicy: Delete
allowVolumeExpansion: true
mountOptions:
   - discard
#@ end
#@ end
